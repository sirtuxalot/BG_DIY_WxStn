/**************************************************************************
weather station kit - wifi version

This is intended to demonstrate all 4 sensors and the microcontroller included in the 
Banggood "AOQDQDQD ESP8266 Weather Station Kit with Temperature Humidity Atmosphetic Pressure Light Sensor 0.96 Display for Arduino IDE IoT Starter" 

Uses libraries from Adafruit, Adi Dax, Sparkfun, Christopher Laws and various individual contributers to the arguino labrary ecosystem

Precariously hacked together from library examples by pileofstuff.ca

Feel free to modify, break, fix, mangle, bend, fold, spindle or mutilate this code as you see fit. 

I give no guarantees or warranties with this code. It might not even work...

**************************************************************************/


//common library for all I2C stuff
#include <Wire.h>

// library  for DHT11
#include <dht11.h>

// library  for BMP180
#include <SFE_BMP180.h>

// library  for  BH1750 (AKA GY-30)
#include <BH1750.h>

// library for web server
#include <ESP8266WiFi.h>

//defines for DHT11
#define DHT11PIN 2
dht11 DHT11;

//define for BMP180
SFE_BMP180 pressure;

// define for BH1750 (AKA GY-30)
BH1750 lightMeter;

// defines for web server
const char* ssid = "***CHANGE_THIS***"; /* Add your router's SSID */
const char* password = "***CHANGE_THIS***"; /*Add the password */

WiFiServer espServer(80); /* Instance of WiFiServer with port number 80 */
/* 80 is the Port Number for HTTP Web Server */

// variables for sensors

float temp = 0;
float humid = 0;
float pres = 0;
int light = 0;

void setup() {

  //for BMP180
  pressure.begin();

  //  for BH1750 (AKA GY-30)
  lightMeter.begin();

  //for web server
  Serial.begin(115200); /* Begin Serial Communication with 115200 Baud Rate */
  
  Serial.print("\n");
  Serial.print("Connecting to: ");
  Serial.println(ssid);
  WiFi.mode(WIFI_STA); /* Configure ESP8266 in STA Mode */
  WiFi.begin(ssid, password); /* Connect to Wi-Fi based on above SSID and Password */
  while(WiFi.status() != WL_CONNECTED)
  {
    Serial.print("*");
    delay(500);
  }
  Serial.print("\n");
  Serial.print("Connected to Wi-Fi: ");
  Serial.println(WiFi.SSID());
   Serial.print("\n");
  Serial.println("Starting ESP8266 Web Server...");
  espServer.begin(); /* Start the HTTP web Server */
  Serial.println("ESP8266 Web Server Started");
  Serial.print("\n");
  Serial.print("The URL of ESP8266 Web Server is: ");
  Serial.print("http://");
  Serial.println(WiFi.localIP());
  Serial.print("\n");
  Serial.println("Use the above URL in your Browser to access ESP8266 Web Server\n");

}

void loop() {

  //read sensors

  //DHT11
  int chk = DHT11.read(DHT11PIN);
  temp = ((float)DHT11.temperature);
  humid = DHT11.humidity;

  //BMP180  (we could optinally use this for temperature)
  double T, P, p0, a;
  pressure.startTemperature();
  pressure.getTemperature(T);
  pressure.startPressure(3);
  pressure.getPressure(P, T);
  pres = P;

  //  BH1750
  float light = lightMeter.readLightLevel();

  //web server stuff
  WiFiClient client = espServer.available(); /* Check if a client is available */
  if(!client) {
    return;
  }

  /* HTTP Response in the form of HTML Web Page */
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: text/html");
  client.println(); //  IMPORTANT
  client.println("<!DOCTYPE HTML>");
  client.println("<html>");
  client.println("<head>");
  client.println("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
  client.println("<link rel=\"icon\" href=\"data:,\">");
  /* CSS Styling for Buttons and Web Page */
  client.println("<style>");
  client.println("html { font-family: Courier New; display: inline-block; margin: 0px auto; text-align: center;}");
  client.println("text-decoration: none; font-size: 25px; margin: 2px; cursor: pointer;}");
  client.println("</style>");
  client.println("</head>");
  
  /* The main body of the Web Page */
  client.println("<body>");
  client.println("<h2>yer basic weather station</h2>");
  
  client.print("<p>Temperature: </p>");
  client.println(temp);

  client.print("<p>Humidity: </p>");
  client.println(humid);
  client.print("<p>Pressure:  </p>");
  client.println(pres);
  client.print("<p>Light: </p>");
  client.println(light);

}
